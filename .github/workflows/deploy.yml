name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Pre-fetch Notion Data
        run: |
          # Fetch data from Notion API and save as JSON
          curl -X POST "https://api.notion.com/v1/databases/14fcf2908c698021aa5ee3656ab26d16/query" \
            -H "Authorization: Bearer ${{ secrets.NOTION_TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "Notion-Version: 2022-06-28" \
            -d '{"sorts":[{"property":"Category","direction":"ascending"},{"property":"Date","direction":"descending"}]}' \
            > raw-notion-data.json
          
          # Process the data and check page content for each item
          node -e "
          const fs = require('fs');
          const https = require('https');
          
          const data = JSON.parse(fs.readFileSync('raw-notion-data.json', 'utf8'));
          const token = '${{ secrets.NOTION_TOKEN }}';
          
          function extractText(property) {
            if (!property) return '';
            if (property.type === 'title' && property.title) {
              return property.title.map(text => text.plain_text).join('');
            }
            if (property.type === 'rich_text' && property.rich_text) {
              return property.rich_text.map(text => text.plain_text).join('');
            }
            return '';
          }
          
          function extractSelect(property) {
            if (!property || property.type !== 'select') return '';
            return property.select ? property.select.name : '';
          }
          
          function extractDateYear(property) {
            if (!property) return null;
            if (property.type === 'date' && property.date) {
              const dateToUse = property.date.end || property.date.start;
              if (dateToUse) {
                const year = new Date(dateToUse).getFullYear();
                return isNaN(year) ? null : year;
              }
            }
            return null;
          }
          
          function extractUrl(property) {
            if (!property || property.type !== 'url') return '';
            return property.url || '';
          }
          
          function extractIcon(item) {
            if (!item.icon) return '';
            if (item.icon.type === 'emoji') {
              return item.icon.emoji;
            }
            return '';
          }
          
          async function checkContent(pageId) {
            return new Promise((resolve) => {
              const options = {
                hostname: 'api.notion.com',
                path: \`/v1/blocks/\${pageId}/children\`,
                method: 'GET',
                headers: {
                  'Authorization': \`Bearer \${token}\`,
                  'Content-Type': 'application/json',
                  'Notion-Version': '2022-06-28'
                }
              };
              
              const req = https.request(options, (res) => {
                let body = '';
                res.on('data', (chunk) => body += chunk);
                res.on('end', () => {
                  try {
                    const content = JSON.parse(body);
                    const hasContent = content.results && content.results.length > 0 && 
                      content.results.some(block => {
                        const types = ['paragraph', 'heading_1', 'heading_2', 'heading_3', 'bulleted_list_item', 'numbered_list_item'];
                        return types.some(type => {
                          const blockData = block[type];
                          return blockData && blockData.rich_text && blockData.rich_text.length > 0 &&
                            blockData.rich_text.some(text => text.plain_text.trim().length > 0);
                        });
                      });
                    resolve(hasContent);
                  } catch (e) {
                    resolve(false);
                  }
                });
              });
              
              req.on('error', () => resolve(false));
              req.end();
            });
          }
          
          async function processData() {
            const results = data.results || [];
            const processedItems = [];
            
            for (const item of results) {
              const properties = item.properties;
              const hasContent = await checkContent(item.id);
              
              const processedItem = {
                id: item.id,
                title: extractText(properties.Name),
                category: extractSelect(properties.Category),
                year: extractDateYear(properties.Date),
                description: extractText(properties.Description),
                institution: extractText(properties.Institution),
                location: extractText(properties.Location),
                url: extractUrl(properties.URL),
                icon: extractIcon(item),
                hasContent: hasContent
              };
              
              if (processedItem.title) {
                processedItems.push(processedItem);
              }
            }
            
            fs.writeFileSync('notion-data.json', JSON.stringify(processedItems, null, 2));
            console.log(\`Processed \${processedItems.length} items\`);
          }
          
          processData().catch(console.error);
          "
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
